'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.42000
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Mrp")>  _
Partial Public Class MrpDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "可扩展性方法定义"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertData_Bom(instance As Data_Bom)
    End Sub
  Partial Private Sub UpdateData_Bom(instance As Data_Bom)
    End Sub
  Partial Private Sub DeleteData_Bom(instance As Data_Bom)
    End Sub
  Partial Private Sub InsertData_Inventory(instance As Data_Inventory)
    End Sub
  Partial Private Sub UpdateData_Inventory(instance As Data_Inventory)
    End Sub
  Partial Private Sub DeleteData_Inventory(instance As Data_Inventory)
    End Sub
  Partial Private Sub InsertData_PartVendorConfig(instance As Data_PartVendorConfig)
    End Sub
  Partial Private Sub UpdateData_PartVendorConfig(instance As Data_PartVendorConfig)
    End Sub
  Partial Private Sub DeleteData_PartVendorConfig(instance As Data_PartVendorConfig)
    End Sub
  Partial Private Sub InsertData_ProductionPlan(instance As Data_ProductionPlan)
    End Sub
  Partial Private Sub UpdateData_ProductionPlan(instance As Data_ProductionPlan)
    End Sub
  Partial Private Sub DeleteData_ProductionPlan(instance As Data_ProductionPlan)
    End Sub
  Partial Private Sub InsertExe_GrossMrp(instance As Exe_GrossMrp)
    End Sub
  Partial Private Sub UpdateExe_GrossMrp(instance As Exe_GrossMrp)
    End Sub
  Partial Private Sub DeleteExe_GrossMrp(instance As Exe_GrossMrp)
    End Sub
  Partial Private Sub InsertExe_MrpOrder(instance As Exe_MrpOrder)
    End Sub
  Partial Private Sub UpdateExe_MrpOrder(instance As Exe_MrpOrder)
    End Sub
  Partial Private Sub DeleteExe_MrpOrder(instance As Exe_MrpOrder)
    End Sub
  Partial Private Sub InsertExe_NetMrp(instance As Exe_NetMrp)
    End Sub
  Partial Private Sub UpdateExe_NetMrp(instance As Exe_NetMrp)
    End Sub
  Partial Private Sub DeleteExe_NetMrp(instance As Exe_NetMrp)
    End Sub
  Partial Private Sub InsertExe_GrossMp(instance As Exe_GrossMp)
    End Sub
  Partial Private Sub UpdateExe_GrossMp(instance As Exe_GrossMp)
    End Sub
  Partial Private Sub DeleteExe_GrossMp(instance As Exe_GrossMp)
    End Sub
  Partial Private Sub InsertExe_NetMp(instance As Exe_NetMp)
    End Sub
  Partial Private Sub UpdateExe_NetMp(instance As Exe_NetMp)
    End Sub
  Partial Private Sub DeleteExe_NetMp(instance As Exe_NetMp)
    End Sub
  Partial Private Sub InsertData_OrderedPart(instance As Data_OrderedPart)
    End Sub
  Partial Private Sub UpdateData_OrderedPart(instance As Data_OrderedPart)
    End Sub
  Partial Private Sub DeleteData_OrderedPart(instance As Data_OrderedPart)
    End Sub
  Partial Private Sub InsertSys_Plugin(instance As Sys_Plugin)
    End Sub
  Partial Private Sub UpdateSys_Plugin(instance As Sys_Plugin)
    End Sub
  Partial Private Sub DeleteSys_Plugin(instance As Sys_Plugin)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Mrp.My.MySettings.Default.MrpConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Data_Boms() As System.Data.Linq.Table(Of Data_Bom)
		Get
			Return Me.GetTable(Of Data_Bom)
		End Get
	End Property
	
	Public ReadOnly Property Data_Inventories() As System.Data.Linq.Table(Of Data_Inventory)
		Get
			Return Me.GetTable(Of Data_Inventory)
		End Get
	End Property
	
	Public ReadOnly Property Data_PartVendorConfigs() As System.Data.Linq.Table(Of Data_PartVendorConfig)
		Get
			Return Me.GetTable(Of Data_PartVendorConfig)
		End Get
	End Property
	
	Public ReadOnly Property Data_ProductionPlans() As System.Data.Linq.Table(Of Data_ProductionPlan)
		Get
			Return Me.GetTable(Of Data_ProductionPlan)
		End Get
	End Property
	
	Public ReadOnly Property Exe_GrossMrps() As System.Data.Linq.Table(Of Exe_GrossMrp)
		Get
			Return Me.GetTable(Of Exe_GrossMrp)
		End Get
	End Property
	
	Public ReadOnly Property Exe_MrpOrders() As System.Data.Linq.Table(Of Exe_MrpOrder)
		Get
			Return Me.GetTable(Of Exe_MrpOrder)
		End Get
	End Property
	
	Public ReadOnly Property Exe_NetMrps() As System.Data.Linq.Table(Of Exe_NetMrp)
		Get
			Return Me.GetTable(Of Exe_NetMrp)
		End Get
	End Property
	
	Public ReadOnly Property Exe_GrossMps() As System.Data.Linq.Table(Of Exe_GrossMp)
		Get
			Return Me.GetTable(Of Exe_GrossMp)
		End Get
	End Property
	
	Public ReadOnly Property Exe_NetMps() As System.Data.Linq.Table(Of Exe_NetMp)
		Get
			Return Me.GetTable(Of Exe_NetMp)
		End Get
	End Property
	
	Public ReadOnly Property Data_OrderedParts() As System.Data.Linq.Table(Of Data_OrderedPart)
		Get
			Return Me.GetTable(Of Data_OrderedPart)
		End Get
	End Property
	
	Public ReadOnly Property View_SumOfNetMrps() As System.Data.Linq.Table(Of View_SumOfNetMrp)
		Get
			Return Me.GetTable(Of View_SumOfNetMrp)
		End Get
	End Property
	
	Public ReadOnly Property Sys_Plugins() As System.Data.Linq.Table(Of Sys_Plugin)
		Get
			Return Me.GetTable(Of Sys_Plugin)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Data_Bom")>  _
Partial Public Class Data_Bom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _bomId As String
	
	Private _assemblyPartId As String
	
	Private _materialPartId As String
	
	Private _quantity As Double
	
	Private _uom As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnbomIdChanging(value As String)
    End Sub
    Partial Private Sub OnbomIdChanged()
    End Sub
    Partial Private Sub OnassemblyPartIdChanging(value As String)
    End Sub
    Partial Private Sub OnassemblyPartIdChanged()
    End Sub
    Partial Private Sub OnmaterialPartIdChanging(value As String)
    End Sub
    Partial Private Sub OnmaterialPartIdChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnuomChanging(value As String)
    End Sub
    Partial Private Sub OnuomChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bomId() As String
		Get
			Return Me._bomId
		End Get
		Set
			If (String.Equals(Me._bomId, value) = false) Then
				Me.OnbomIdChanging(value)
				Me.SendPropertyChanging
				Me._bomId = value
				Me.SendPropertyChanged("bomId")
				Me.OnbomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assemblyPartId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property assemblyPartId() As String
		Get
			Return Me._assemblyPartId
		End Get
		Set
			If (String.Equals(Me._assemblyPartId, value) = false) Then
				Me.OnassemblyPartIdChanging(value)
				Me.SendPropertyChanging
				Me._assemblyPartId = value
				Me.SendPropertyChanged("assemblyPartId")
				Me.OnassemblyPartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_materialPartId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property materialPartId() As String
		Get
			Return Me._materialPartId
		End Get
		Set
			If (String.Equals(Me._materialPartId, value) = false) Then
				Me.OnmaterialPartIdChanging(value)
				Me.SendPropertyChanging
				Me._materialPartId = value
				Me.SendPropertyChanged("materialPartId")
				Me.OnmaterialPartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uom", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property uom() As String
		Get
			Return Me._uom
		End Get
		Set
			If (String.Equals(Me._uom, value) = false) Then
				Me.OnuomChanging(value)
				Me.SendPropertyChanging
				Me._uom = value
				Me.SendPropertyChanged("uom")
				Me.OnuomChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Data_Inventory")>  _
Partial Public Class Data_Inventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _uom As String
	
	Private _FIFO As Date
	
	Private _expireDate As Date
	
	Private _quantity As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnuomChanging(value As String)
    End Sub
    Partial Private Sub OnuomChanged()
    End Sub
    Partial Private Sub OnFIFOChanging(value As Date)
    End Sub
    Partial Private Sub OnFIFOChanged()
    End Sub
    Partial Private Sub OnexpireDateChanging(value As Date)
    End Sub
    Partial Private Sub OnexpireDateChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uom", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property uom() As String
		Get
			Return Me._uom
		End Get
		Set
			If (String.Equals(Me._uom, value) = false) Then
				Me.OnuomChanging(value)
				Me.SendPropertyChanging
				Me._uom = value
				Me.SendPropertyChanged("uom")
				Me.OnuomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIFO", DbType:="DateTime NOT NULL")>  _
	Public Property FIFO() As Date
		Get
			Return Me._FIFO
		End Get
		Set
			If ((Me._FIFO = value)  _
						= false) Then
				Me.OnFIFOChanging(value)
				Me.SendPropertyChanging
				Me._FIFO = value
				Me.SendPropertyChanged("FIFO")
				Me.OnFIFOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_expireDate", DbType:="DateTime NOT NULL")>  _
	Public Property expireDate() As Date
		Get
			Return Me._expireDate
		End Get
		Set
			If ((Me._expireDate = value)  _
						= false) Then
				Me.OnexpireDateChanging(value)
				Me.SendPropertyChanging
				Me._expireDate = value
				Me.SendPropertyChanged("expireDate")
				Me.OnexpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Data_PartVendorConfig")>  _
Partial Public Class Data_PartVendorConfig
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _vendorId As String
	
	Private _leadTime As Integer
	
	Private _moq As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnvendorIdChanging(value As String)
    End Sub
    Partial Private Sub OnvendorIdChanged()
    End Sub
    Partial Private Sub OnleadTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnleadTimeChanged()
    End Sub
    Partial Private Sub OnmoqChanging(value As Double)
    End Sub
    Partial Private Sub OnmoqChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vendorId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vendorId() As String
		Get
			Return Me._vendorId
		End Get
		Set
			If (String.Equals(Me._vendorId, value) = false) Then
				Me.OnvendorIdChanging(value)
				Me.SendPropertyChanging
				Me._vendorId = value
				Me.SendPropertyChanged("vendorId")
				Me.OnvendorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leadTime", DbType:="Int NOT NULL")>  _
	Public Property leadTime() As Integer
		Get
			Return Me._leadTime
		End Get
		Set
			If ((Me._leadTime = value)  _
						= false) Then
				Me.OnleadTimeChanging(value)
				Me.SendPropertyChanging
				Me._leadTime = value
				Me.SendPropertyChanged("leadTime")
				Me.OnleadTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_moq", DbType:="Float NOT NULL")>  _
	Public Property moq() As Double
		Get
			Return Me._moq
		End Get
		Set
			If ((Me._moq = value)  _
						= false) Then
				Me.OnmoqChanging(value)
				Me.SendPropertyChanging
				Me._moq = value
				Me.SendPropertyChanged("moq")
				Me.OnmoqChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Data_ProductionPlan")>  _
Partial Public Class Data_ProductionPlan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _planId As String
	
	Private _assemblyPartId As String
	
	Private _time As Date
	
	Private _quantity As Double
	
	Private _bomId As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnplanIdChanging(value As String)
    End Sub
    Partial Private Sub OnplanIdChanged()
    End Sub
    Partial Private Sub OnassemblyPartIdChanging(value As String)
    End Sub
    Partial Private Sub OnassemblyPartIdChanged()
    End Sub
    Partial Private Sub OntimeChanging(value As Date)
    End Sub
    Partial Private Sub OntimeChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnbomIdChanging(value As String)
    End Sub
    Partial Private Sub OnbomIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_planId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property planId() As String
		Get
			Return Me._planId
		End Get
		Set
			If (String.Equals(Me._planId, value) = false) Then
				Me.OnplanIdChanging(value)
				Me.SendPropertyChanging
				Me._planId = value
				Me.SendPropertyChanged("planId")
				Me.OnplanIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assemblyPartId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property assemblyPartId() As String
		Get
			Return Me._assemblyPartId
		End Get
		Set
			If (String.Equals(Me._assemblyPartId, value) = false) Then
				Me.OnassemblyPartIdChanging(value)
				Me.SendPropertyChanging
				Me._assemblyPartId = value
				Me.SendPropertyChanged("assemblyPartId")
				Me.OnassemblyPartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_time", DbType:="DateTime NOT NULL")>  _
	Public Property time() As Date
		Get
			Return Me._time
		End Get
		Set
			If ((Me._time = value)  _
						= false) Then
				Me.OntimeChanging(value)
				Me.SendPropertyChanging
				Me._time = value
				Me.SendPropertyChanged("time")
				Me.OntimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bomId() As String
		Get
			Return Me._bomId
		End Get
		Set
			If (String.Equals(Me._bomId, value) = false) Then
				Me.OnbomIdChanging(value)
				Me.SendPropertyChanging
				Me._bomId = value
				Me.SendPropertyChanged("bomId")
				Me.OnbomIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exe_GrossMrp")>  _
Partial Public Class Exe_GrossMrp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _sourcePart As String
	
	Private _sourceDoc As String
	
	Private _requiredDate As Date
	
	Private _quantity As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnsourcePartChanging(value As String)
    End Sub
    Partial Private Sub OnsourcePartChanged()
    End Sub
    Partial Private Sub OnsourceDocChanging(value As String)
    End Sub
    Partial Private Sub OnsourceDocChanged()
    End Sub
    Partial Private Sub OnrequiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredDateChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourcePart", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property sourcePart() As String
		Get
			Return Me._sourcePart
		End Get
		Set
			If (String.Equals(Me._sourcePart, value) = false) Then
				Me.OnsourcePartChanging(value)
				Me.SendPropertyChanging
				Me._sourcePart = value
				Me.SendPropertyChanged("sourcePart")
				Me.OnsourcePartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourceDoc", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property sourceDoc() As String
		Get
			Return Me._sourceDoc
		End Get
		Set
			If (String.Equals(Me._sourceDoc, value) = false) Then
				Me.OnsourceDocChanging(value)
				Me.SendPropertyChanging
				Me._sourceDoc = value
				Me.SendPropertyChanged("sourceDoc")
				Me.OnsourceDocChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="DateTime NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me.OnrequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._requiredDate = value
				Me.SendPropertyChanged("requiredDate")
				Me.OnrequiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exe_MrpOrder")>  _
Partial Public Class Exe_MrpOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _vendorId As String
	
	Private _quantity As Double
	
	Private _requiredDate As Date
	
	Private _orderDate As Date
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnvendorIdChanging(value As String)
    End Sub
    Partial Private Sub OnvendorIdChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnrequiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredDateChanged()
    End Sub
    Partial Private Sub OnorderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vendorId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property vendorId() As String
		Get
			Return Me._vendorId
		End Get
		Set
			If (String.Equals(Me._vendorId, value) = false) Then
				Me.OnvendorIdChanging(value)
				Me.SendPropertyChanging
				Me._vendorId = value
				Me.SendPropertyChanged("vendorId")
				Me.OnvendorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="DateTime NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me.OnrequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._requiredDate = value
				Me.SendPropertyChanged("requiredDate")
				Me.OnrequiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderDate", DbType:="DateTime NOT NULL")>  _
	Public Property orderDate() As Date
		Get
			Return Me._orderDate
		End Get
		Set
			If ((Me._orderDate = value)  _
						= false) Then
				Me.OnorderDateChanging(value)
				Me.SendPropertyChanging
				Me._orderDate = value
				Me.SendPropertyChanged("orderDate")
				Me.OnorderDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exe_NetMrp")>  _
Partial Public Class Exe_NetMrp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _requiredDate As Date
	
	Private _orderDate As Date
	
	Private _quantity As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnrequiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredDateChanged()
    End Sub
    Partial Private Sub OnorderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnorderDateChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="DateTime NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me.OnrequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._requiredDate = value
				Me.SendPropertyChanged("requiredDate")
				Me.OnrequiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderDate", DbType:="DateTime NOT NULL")>  _
	Public Property orderDate() As Date
		Get
			Return Me._orderDate
		End Get
		Set
			If ((Me._orderDate = value)  _
						= false) Then
				Me.OnorderDateChanging(value)
				Me.SendPropertyChanging
				Me._orderDate = value
				Me.SendPropertyChanged("orderDate")
				Me.OnorderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exe_GrossMps")>  _
Partial Public Class Exe_GrossMp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _assemblyPartId As String
	
	Private _requiredTime As Date
	
	Private _source As String
	
	Private _bomId As String
	
	Private _mrpRound As String
	
	Private _quantity As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnassemblyPartIdChanging(value As String)
    End Sub
    Partial Private Sub OnassemblyPartIdChanged()
    End Sub
    Partial Private Sub OnrequiredTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredTimeChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As String)
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OnbomIdChanging(value As String)
    End Sub
    Partial Private Sub OnbomIdChanged()
    End Sub
    Partial Private Sub OnmrpRoundChanging(value As String)
    End Sub
    Partial Private Sub OnmrpRoundChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assemblyPartId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property assemblyPartId() As String
		Get
			Return Me._assemblyPartId
		End Get
		Set
			If (String.Equals(Me._assemblyPartId, value) = false) Then
				Me.OnassemblyPartIdChanging(value)
				Me.SendPropertyChanging
				Me._assemblyPartId = value
				Me.SendPropertyChanged("assemblyPartId")
				Me.OnassemblyPartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredTime", DbType:="DateTime NOT NULL")>  _
	Public Property requiredTime() As Date
		Get
			Return Me._requiredTime
		End Get
		Set
			If ((Me._requiredTime = value)  _
						= false) Then
				Me.OnrequiredTimeChanging(value)
				Me.SendPropertyChanging
				Me._requiredTime = value
				Me.SendPropertyChanged("requiredTime")
				Me.OnrequiredTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property source() As String
		Get
			Return Me._source
		End Get
		Set
			If (String.Equals(Me._source, value) = false) Then
				Me.OnsourceChanging(value)
				Me.SendPropertyChanging
				Me._source = value
				Me.SendPropertyChanged("source")
				Me.OnsourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bomId() As String
		Get
			Return Me._bomId
		End Get
		Set
			If (String.Equals(Me._bomId, value) = false) Then
				Me.OnbomIdChanging(value)
				Me.SendPropertyChanging
				Me._bomId = value
				Me.SendPropertyChanged("bomId")
				Me.OnbomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mrpRound", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mrpRound() As String
		Get
			Return Me._mrpRound
		End Get
		Set
			If (String.Equals(Me._mrpRound, value) = false) Then
				Me.OnmrpRoundChanging(value)
				Me.SendPropertyChanging
				Me._mrpRound = value
				Me.SendPropertyChanged("mrpRound")
				Me.OnmrpRoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exe_NetMps")>  _
Partial Public Class Exe_NetMp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _assemblyPartId As String
	
	Private _requiredTime As Date
	
	Private _source As String
	
	Private _bomId As String
	
	Private _mrpRound As String
	
	Private _quantity As Double
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnassemblyPartIdChanging(value As String)
    End Sub
    Partial Private Sub OnassemblyPartIdChanged()
    End Sub
    Partial Private Sub OnrequiredTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnrequiredTimeChanged()
    End Sub
    Partial Private Sub OnsourceChanging(value As String)
    End Sub
    Partial Private Sub OnsourceChanged()
    End Sub
    Partial Private Sub OnbomIdChanging(value As String)
    End Sub
    Partial Private Sub OnbomIdChanged()
    End Sub
    Partial Private Sub OnmrpRoundChanging(value As String)
    End Sub
    Partial Private Sub OnmrpRoundChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assemblyPartId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property assemblyPartId() As String
		Get
			Return Me._assemblyPartId
		End Get
		Set
			If (String.Equals(Me._assemblyPartId, value) = false) Then
				Me.OnassemblyPartIdChanging(value)
				Me.SendPropertyChanging
				Me._assemblyPartId = value
				Me.SendPropertyChanged("assemblyPartId")
				Me.OnassemblyPartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredTime", DbType:="DateTime NOT NULL")>  _
	Public Property requiredTime() As Date
		Get
			Return Me._requiredTime
		End Get
		Set
			If ((Me._requiredTime = value)  _
						= false) Then
				Me.OnrequiredTimeChanging(value)
				Me.SendPropertyChanging
				Me._requiredTime = value
				Me.SendPropertyChanged("requiredTime")
				Me.OnrequiredTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_source", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property source() As String
		Get
			Return Me._source
		End Get
		Set
			If (String.Equals(Me._source, value) = false) Then
				Me.OnsourceChanging(value)
				Me.SendPropertyChanging
				Me._source = value
				Me.SendPropertyChanged("source")
				Me.OnsourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bomId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property bomId() As String
		Get
			Return Me._bomId
		End Get
		Set
			If (String.Equals(Me._bomId, value) = false) Then
				Me.OnbomIdChanging(value)
				Me.SendPropertyChanging
				Me._bomId = value
				Me.SendPropertyChanged("bomId")
				Me.OnbomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mrpRound", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mrpRound() As String
		Get
			Return Me._mrpRound
		End Get
		Set
			If (String.Equals(Me._mrpRound, value) = false) Then
				Me.OnmrpRoundChanging(value)
				Me.SendPropertyChanging
				Me._mrpRound = value
				Me.SendPropertyChanged("mrpRound")
				Me.OnmrpRoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Data_OrderedPart")>  _
Partial Public Class Data_OrderedPart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _partId As String
	
	Private _sourceId As String
	
	Private _quantity As Double
	
	Private _arriveTime As Date
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnpartIdChanging(value As String)
    End Sub
    Partial Private Sub OnpartIdChanged()
    End Sub
    Partial Private Sub OnsourceIdChanging(value As String)
    End Sub
    Partial Private Sub OnsourceIdChanged()
    End Sub
    Partial Private Sub OnquantityChanging(value As Double)
    End Sub
    Partial Private Sub OnquantityChanged()
    End Sub
    Partial Private Sub OnarriveTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnarriveTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me.OnpartIdChanging(value)
				Me.SendPropertyChanging
				Me._partId = value
				Me.SendPropertyChanged("partId")
				Me.OnpartIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sourceId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property sourceId() As String
		Get
			Return Me._sourceId
		End Get
		Set
			If (String.Equals(Me._sourceId, value) = false) Then
				Me.OnsourceIdChanging(value)
				Me.SendPropertyChanging
				Me._sourceId = value
				Me.SendPropertyChanged("sourceId")
				Me.OnsourceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quantity", DbType:="Float NOT NULL")>  _
	Public Property quantity() As Double
		Get
			Return Me._quantity
		End Get
		Set
			If ((Me._quantity = value)  _
						= false) Then
				Me.OnquantityChanging(value)
				Me.SendPropertyChanging
				Me._quantity = value
				Me.SendPropertyChanged("quantity")
				Me.OnquantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arriveTime", DbType:="DateTime NOT NULL")>  _
	Public Property arriveTime() As Date
		Get
			Return Me._arriveTime
		End Get
		Set
			If ((Me._arriveTime = value)  _
						= false) Then
				Me.OnarriveTimeChanging(value)
				Me.SendPropertyChanging
				Me._arriveTime = value
				Me.SendPropertyChanged("arriveTime")
				Me.OnarriveTimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.View_SumOfNetMrp")>  _
Partial Public Class View_SumOfNetMrp
	
	Private _partId As String
	
	Private _requiredDate As Date
	
	Private _nrofquantity As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partId", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property partId() As String
		Get
			Return Me._partId
		End Get
		Set
			If (String.Equals(Me._partId, value) = false) Then
				Me._partId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_requiredDate", DbType:="Date NOT NULL")>  _
	Public Property requiredDate() As Date
		Get
			Return Me._requiredDate
		End Get
		Set
			If ((Me._requiredDate = value)  _
						= false) Then
				Me._requiredDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nrofquantity", DbType:="Float")>  _
	Public Property nrofquantity() As System.Nullable(Of Double)
		Get
			Return Me._nrofquantity
		End Get
		Set
			If (Me._nrofquantity.Equals(value) = false) Then
				Me._nrofquantity = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sys_Plugin")>  _
Partial Public Class Sys_Plugin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _pluginType As String
	
	Private _assemblyFile As String
	
	Private _type As String
	
	Private _method As String
	
	Private _seq As System.Nullable(Of Integer)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnpluginTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpluginTypeChanged()
    End Sub
    Partial Private Sub OnassemblyFileChanging(value As String)
    End Sub
    Partial Private Sub OnassemblyFileChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub OnmethodChanging(value As String)
    End Sub
    Partial Private Sub OnmethodChanged()
    End Sub
    Partial Private Sub OnseqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnseqChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pluginType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pluginType() As String
		Get
			Return Me._pluginType
		End Get
		Set
			If (String.Equals(Me._pluginType, value) = false) Then
				Me.OnpluginTypeChanging(value)
				Me.SendPropertyChanging
				Me._pluginType = value
				Me.SendPropertyChanged("pluginType")
				Me.OnpluginTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_assemblyFile", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property assemblyFile() As String
		Get
			Return Me._assemblyFile
		End Get
		Set
			If (String.Equals(Me._assemblyFile, value) = false) Then
				Me.OnassemblyFileChanging(value)
				Me.SendPropertyChanging
				Me._assemblyFile = value
				Me.SendPropertyChanged("assemblyFile")
				Me.OnassemblyFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_method", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property method() As String
		Get
			Return Me._method
		End Get
		Set
			If (String.Equals(Me._method, value) = false) Then
				Me.OnmethodChanging(value)
				Me.SendPropertyChanging
				Me._method = value
				Me.SendPropertyChanged("method")
				Me.OnmethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seq", DbType:="Int")>  _
	Public Property seq() As System.Nullable(Of Integer)
		Get
			Return Me._seq
		End Get
		Set
			If (Me._seq.Equals(value) = false) Then
				Me.OnseqChanging(value)
				Me.SendPropertyChanging
				Me._seq = value
				Me.SendPropertyChanged("seq")
				Me.OnseqChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
